#!/usr/bin/env sh
# update freedns.afraid.org records

#font decorations
bold=$(tput bold);
normal=$(tput sgr0);

function myip()
{
    curl -s 'http://ifconfig.me/ip';
}

function usage()
{
    echo "usage: $(basename $0) [sha-1] [subdomain] [subdomain2 ..." \
        "subdomainX]";
}

# freedns URL
URL="http://freedns.afraid.org/api/?action=getdyndns&sha=";
# IPREGEX="([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}";
IPREGEX="\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}";

# count arguments
if [[ $# -lt 2 ]];
then
    echo >&2 "Requires at least 2 arguments";
    usage;
    exit 1;
fi

# get SHA
URL+=$1;
API=$(curl -s $URL);

# check for authentication errors
echo "$API" | grep -iq "error: could not authenticate" && 
    { echo >&2 "Could not authenticate."; exit 1; };

# no results
if [[ -z $API ]];
then
    echo >&2 "No results.";
    exit 1;
fi

# foreach argument
shift 1;
until [ -z "$1" ];
do
    # get IP address belonging to domain (arg 1)
    IPTEMP=$(echo "$API" | grep -io "$1|\($IPREGEX\)");
    IP=$(echo "$IPTEMP" | grep -io "\($IPREGEX\)");

    # if IP not blank
    if [[ -n $IP ]];
    then
        # get public IP
        PUBLICIP=$(myip);

        # if IP is not already stored
        if [[ $PUBLICIP != $IP ]];
        then
            # get update URL
            UPDATEURL=$(echo "$API" | grep -i "$IPTEMP" | grep -io \
                "http://freedns.afraid.org/dynamic/update.php?.\+");
            # send update request, check for errors
            STATUS=$(curl -s $UPDATEURL);
            echo $STATUS | grep -iq "error: address \($IPREGEX\) has not
                changed" &&
                { echo "Address ${bold}$1${normal} has not changed"; shift; continue; }
            echo "${bold}$1${normal} changed to ${bold}${PUBLICIP}${normal}";
        else
            # IP address already stored at freedns.afraid.org
            echo "${bold}$1${normal} already set to ${bold}${PUBLICIP}${normal}";
        fi

    # no matches for domain
    else
        echo >&2 "No matches for ${bold}$1${normal}";
    fi

    shift;
done;
